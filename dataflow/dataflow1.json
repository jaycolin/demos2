{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NationsInput",
						"type": "DatasetReference"
					},
					"name": "nations"
				},
				{
					"dataset": {
						"referenceName": "students",
						"type": "DatasetReference"
					},
					"name": "students",
					"description": "Import data from "
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "nationsDated",
						"type": "DatasetReference"
					},
					"name": "blobNationsDated"
				},
				{
					"dataset": {
						"referenceName": "studentsNationsUtf8",
						"type": "DatasetReference"
					},
					"name": "studentsNationsUtf8"
				},
				{
					"dataset": {
						"referenceName": "studentsNationsISO88591",
						"type": "DatasetReference"
					},
					"name": "studentsNationsISO88591"
				}
			],
			"transformations": [
				{
					"name": "nationsWithDate"
				},
				{
					"name": "leftJoinWithNations"
				},
				{
					"name": "rules"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          name as string,",
				"          capital as string,",
				"          population as integer,",
				"          area as integer,",
				"          currency as string,",
				"          languages as string[],",
				"          region as string,",
				"          subregion as string,",
				"          flag as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> nations",
				"source(output(",
				"          name as string,",
				"          college as string,",
				"          number_of_students as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> students",
				"nations derive(currentDate = toString(currentDate(), 'YYYY-MM-dd')) ~> nationsWithDate",
				"students, nationsWithDate join(students@name == nations@name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftJoinWithNations",
				"leftJoinWithNations alterRow(deleteIf(not(hasPath(students@name))),",
				"     insertIf(true())) ~> rules",
				"leftJoinWithNations select(mapColumn(",
				"          name = students@name,",
				"          college,",
				"          number_of_students,",
				"          name = nations@name,",
				"          capital,",
				"          population,",
				"          area,",
				"          currency,",
				"          languages,",
				"          region,",
				"          subregion,",
				"          flag,",
				"          currentDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(xml = ERROR_FUNCTION('')) ~> derivedColumn1",
				"nationsWithDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          name as string,",
				"          capital as string,",
				"          population as integer,",
				"          area as integer,",
				"          currency as string,",
				"          languages as string[],",
				"          region as string,",
				"          subregion as string,",
				"          flag as string,",
				"          currentDate as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> blobNationsDated",
				"leftJoinWithNations sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> studentsNationsUtf8",
				"leftJoinWithNations sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> studentsNationsISO88591"
			]
		}
	}
}